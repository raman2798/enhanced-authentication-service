tags:
  - name: Users
    description: API for managing users

paths:
  /users:
    post:
      summary: Create a new user
      operationId: createUser
      tags:
        - Users
      description: Creates a new user
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/CreateUserRequest'
      responses:
        '201':
          description: Successful user creation
        '400':
          $ref: '#/components/responses/BadRequest'

    get:
      summary: List all users
      operationId: listUsers
      tags:
        - Users
      description: Retrieves a list of all users
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PageNumber'
        - $ref: '#/components/parameters/PageLimit'
        - $ref: '#/components/parameters/IsDownload'
      responses:
        '200':
          description: List of users
        '400':
          $ref: '#/components/responses/BadRequest'

  /users/{userId}:
    put:
      summary: Update user by ID
      operationId: updateUser
      tags:
        - Users
      description: Updates an existing user by ID
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        $ref: '#/components/requestBodies/UpdateUserRequest'
      responses:
        '200':
          description: Successful user update
        '400':
          $ref: '#/components/responses/BadRequest'

    get:
      summary: Retrieve user by ID
      operationId: getUser
      tags:
        - Users
      description: Retrieves a user by ID
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: Successful user retrieval
        '400':
          $ref: '#/components/responses/BadRequest'

  /users/search:
    get:
      summary: Search users
      operationId: searchUsers
      tags:
        - Users
      description: Searches for users
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/SearchQuery'
      responses:
        '200':
          description: List of users
        '400':
          $ref: '#/components/responses/BadRequest'

components:
  requestBodies:
    CreateUserRequest:
      description: Request to create a user
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateUserRequestSchema'

    UpdateUserRequest:
      description: Request to update a user
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserRequestSchema'

  schemas:
    UserRequestSchema:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        gender:
          type: string
        RoleIds:
          type: array
          items:
            type: string
      example:
        firstName: John
        lastName: Doe
        email: updated_user@email.com
        gender: male
        RoleIds:
          - role1
          - role2

    CreateUserRequestSchema:
      allOf:
        - $ref: '#/components/schemas/UserRequestSchema'
        - type: object
          required:
            - firstName
            - lastName
            - email
            - gender
            - RoleIds

    UpdateUserRequestSchema:
      $ref: '#/components/schemas/UserRequestSchema'

  parameters:
    UserId:
      name: userId
      in: path
      description: ID of the user
      required: true
      schema:
        type: string
    SearchQuery:
      name: searchValue
      in: query
      description: Search user
      required: true
      schema:
        type: string
